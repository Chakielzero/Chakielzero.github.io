name: Verificación de Enlaces Rotos

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  check-links:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repositorio
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Instalar herramientas de verificación
      run: |
        npm install -g broken-link-checker
        sudo apt-get update
        sudo apt-get install -y lynx curl jq

    - name: Verificar enlaces y crear reporte
      run: |
        mkdir -p logs

        DOMAIN="https://chakielroms.com"
        LOG_FILE="logs/broken-links.log"
        DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')

        echo "=== VERIFICACIÓN DE ENLACES ROTOS - $DATE ===" > $LOG_FILE
        echo "" >> $LOG_FILE
        echo "🌐 Dominio verificado: $DOMAIN" >> $LOG_FILE
        echo "📅 Fecha de verificación: $DATE" >> $LOG_FILE
        echo "" >> $LOG_FILE

        # Variables para el resumen de Discord
        ERRORS_COUNT=0
        WARNINGS_COUNT=0
        SUCCESS_COUNT=0
        DISCORD_MESSAGE=""

        # Análisis de archivos HTML locales
        HTML_FILES=$(find . -name "*.html" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')

        if [ -z "$HTML_FILES" ]; then
          echo "❌ No se encontraron archivos HTML" >> $LOG_FILE
          DISCORD_MESSAGE="$DISCORD_MESSAGE❌ No se encontraron archivos HTML\n"
        else
          HTML_COUNT=$(echo "$HTML_FILES" | wc -l)
          echo "📄 Archivos HTML encontrados: $HTML_COUNT" >> $LOG_FILE
          echo "$HTML_FILES" >> $LOG_FILE
          echo "" >> $LOG_FILE

          for file in $HTML_FILES; do
            echo "🔍 Analizando: $file" >> $LOG_FILE
            HREF_LINKS=$(grep -oP 'href="\K[^"]+' "$file" 2>/dev/null || echo "")
            SRC_LINKS=$(grep -oP 'src="\K[^"]+' "$file" 2>/dev/null || echo "")

            if [ -n "$HREF_LINKS" ]; then
              echo "  📎 Enlaces href encontrados:" >> $LOG_FILE
              echo "$HREF_LINKS" | sed 's/^/    - /' >> $LOG_FILE
            fi

            if [ -n "$SRC_LINKS" ]; then
              echo "  🖼️ Enlaces src encontrados:" >> $LOG_FILE
              echo "$SRC_LINKS" | sed 's/^/    - /' >> $LOG_FILE
            fi

            echo "" >> $LOG_FILE
          done
        fi

        # Verificar el sitio web en vivo
        echo "🔗 Verificando páginas críticas:" >> $LOG_FILE
        if curl -s --head --max-time 10 "$DOMAIN" | head -n 1 | grep -q "200 OK"; then
          CRITICAL_PAGES=(
            "$DOMAIN"
            "$DOMAIN/index.html"
          )

          for page in "${CRITICAL_PAGES[@]}"; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$page" || echo "ERROR")
            TIME=$(curl -s -o /dev/null -w "%{time_total}" --max-time 10 "$page" 2>/dev/null || echo "ERROR")

            if [ "$STATUS" = "200" ]; then
              echo "$page ✅ Estado: $STATUS (${TIME}s)" >> $LOG_FILE
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            elif [ "$STATUS" = "ERROR" ]; then
              echo "$page ❌ Error de conexión" >> $LOG_FILE
              ERRORS_COUNT=$((ERRORS_COUNT + 1))
              DISCORD_MESSAGE="$DISCORD_MESSAGE❌ $page - Error de conexión\n"
            else
              echo "$page ⚠️ Estado: $STATUS" >> $LOG_FILE
              WARNINGS_COUNT=$((WARNINGS_COUNT + 1))
              DISCORD_MESSAGE="$DISCORD_MESSAGE⚠️ $page - Estado: $STATUS\n"
            fi
          done
        else
          echo "❌ No se pudo conectar al dominio principal" >> $LOG_FILE
          ERRORS_COUNT=$((ERRORS_COUNT + 1))
          DISCORD_MESSAGE="$DISCORD_MESSAGE❌ No se pudo conectar al dominio principal\n"
        fi

        echo "" >> $LOG_FILE

        # Verificar recursos estáticos locales
        CSS_FILES=$(find . -name "*.css" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')
        JS_FILES=$(find . -name "*.js" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*' -not -path './node_modules/*')
        IMG_FILES=$(find . \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" -o -name "*.webp" \) -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')

        HTML_COUNT=$(echo "$HTML_FILES" | wc -l)
        CSS_COUNT=$(echo "$CSS_FILES" | wc -l)
        JS_COUNT=$(echo "$JS_FILES" | wc -l)
        IMG_COUNT=$(echo "$IMG_FILES" | wc -l)

        echo "=== RESUMEN ===" >> $LOG_FILE
        echo "📊 Estadísticas del sitio:" >> $LOG_FILE
        echo "  - Archivos HTML: $HTML_COUNT" >> $LOG_FILE
        echo "  - Archivos CSS: $CSS_COUNT" >> $LOG_FILE
        echo "  - Archivos JS: $JS_COUNT" >> $LOG_FILE
        echo "  - Archivos de imagen: $IMG_COUNT" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "📈 Estado de verificación:" >> $LOG_FILE
        echo "  - Páginas exitosas: $SUCCESS_COUNT" >> $LOG_FILE
        echo "  - Advertencias: $WARNINGS_COUNT" >> $LOG_FILE
        echo "  - Errores: $ERRORS_COUNT" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "✅ Verificación completada: $DATE" >> $LOG_FILE

        # Guardar variables para Discord en archivo
        echo "ERRORS_COUNT=$ERRORS_COUNT" >> $GITHUB_ENV
        echo "WARNINGS_COUNT=$WARNINGS_COUNT" >> $GITHUB_ENV
        echo "SUCCESS_COUNT=$SUCCESS_COUNT" >> $GITHUB_ENV
        echo "HTML_COUNT=$HTML_COUNT" >> $GITHUB_ENV
        echo "CSS_COUNT=$CSS_COUNT" >> $GITHUB_ENV
        echo "JS_COUNT=$JS_COUNT" >> $GITHUB_ENV
        echo "IMG_COUNT=$IMG_COUNT" >> $GITHUB_ENV
        echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
        


    - name: Commit y push del reporte
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git fetch origin
        git rebase origin/main || git rebase origin/master || echo "No rebase needed"

        git add logs/broken-links.log

        if git diff --staged --quiet; then
          echo "No hay cambios en el reporte de enlaces"
        else
          git commit -m "🔗 Reporte de enlaces rotos - $(date '+%Y-%m-%d %H:%M')"
          git push || {
            echo "Push failed, trying with rebase..."
            git pull --rebase origin main || git pull --rebase origin master
            git push
          }
        fi

    - name: Enviar notificación a Discord
      if: always()
      run: |
        DATE=$(date '+%Y-%m-%d %H:%M')
        REPO_URL="https://github.com/${{ github.repository }}"
        LOG_URL="$REPO_URL/blob/${{ github.ref_name }}/logs/broken-links.log"
        ACTION_URL="$REPO_URL/actions/runs/${{ github.run_id }}"
        
        # Determinar el estado general
        if [ $ERRORS_COUNT -gt 0 ]; then
          STATUS="🔴 **ERRORES**"
          COLOR=15158332  # Rojo
        elif [ $WARNINGS_COUNT -gt 0 ]; then
          STATUS="🟡 **ADVERTENCIAS**"
          COLOR=16776960  # Amarillo
        else
          STATUS="🟢 **OK**"
          COLOR=5763719   # Verde
        fi

        # Crear notificación concisa
        cat > discord_payload.json << EOF
        {
          "embeds": [{
            "title": "🔗 Verificación de Enlaces - chakielroms.com",
            "description": "$STATUS | ✅ $SUCCESS_COUNT • ⚠️ $WARNINGS_COUNT • ❌ $ERRORS_COUNT",
            "color": $COLOR,
            "fields": [
              {
                "name": "📄 Ver Log Completo",
                "value": "[📋 broken-links.log]($LOG_URL)",
                "inline": true
              },
              {
                "name": "🔧 Ver Ejecución",
                "value": "[⚙️ GitHub Action]($ACTION_URL)",
                "inline": true
              }
            ],
            "footer": {
              "text": "$DATE UTC"
            }
          }]
        }
        EOF

        # Enviar a Discord
        if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d @discord_payload.json \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
          
          echo "✅ Notificación enviada a Discord"
        else
          echo "⚠️ DISCORD_WEBHOOK_URL no configurado"
        fi

        rm -f discord_payload.json
