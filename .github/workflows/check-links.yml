name: Verificaci√≥n de rutas y enlaces rotos

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # Todos los d√≠as a las 3:00 UTC

jobs:
  verificar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar zona horaria y permisos
        run: |
          sudo timedatectl set-timezone UTC
          chmod +x scripts/verificar-rutas.sh

      - name: Ejecutar verificaci√≥n de rutas
        id: rutas
        run: bash scripts/verificar-rutas.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar herramientas para verificaci√≥n de enlaces
        run: |
          npm install -g broken-link-checker
          sudo apt-get update
          sudo apt-get install -y lynx

      - name: Verificar enlaces y crear reporte
        run: |
          mkdir -p logs

          DOMAIN="https://chakielroms.com"
          LOG_FILE="logs/broken-links.log"
          DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')

          echo "=== VERIFICACI√ìN DE ENLACES ROTOS - $DATE ===" > $LOG_FILE
          echo "" >> $LOG_FILE
          echo "üåê Dominio verificado: $DOMAIN" >> $LOG_FILE
          echo "üìÖ Fecha de verificaci√≥n: $DATE" >> $LOG_FILE
          echo "" >> $LOG_FILE

          HTML_FILES=$(find . -name "*.html" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')

          if [ -z "$HTML_FILES" ]; then
            echo "‚ùå No se encontraron archivos HTML" >> $LOG_FILE
          else
            echo "üìÑ Archivos HTML encontrados:" >> $LOG_FILE
            echo "$HTML_FILES" >> $LOG_FILE
            echo "" >> $LOG_FILE

            for file in $HTML_FILES; do
              echo "üîç Analizando: $file" >> $LOG_FILE
              HREF_LINKS=$(grep -oP 'href="\K[^"]+' "$file" 2>/dev/null || echo "")
              SRC_LINKS=$(grep -oP 'src="\K[^"]+' "$file" 2>/dev/null || echo "")

              if [ -n "$HREF_LINKS" ]; then
                echo "  üìé Enlaces href encontrados:" >> $LOG_FILE
                echo "$HREF_LINKS" | sed 's/^/    - /' >> $LOG_FILE
              fi

              if [ -n "$SRC_LINKS" ]; then
                echo "  üñºÔ∏è Enlaces src encontrados:" >> $LOG_FILE
                echo "$SRC_LINKS" | sed 's/^/    - /' >> $LOG_FILE
              fi

              echo "" >> $LOG_FILE
            done
          fi

          if curl -s --head --max-time 10 "$DOMAIN" | head -n 1 | grep -q "200 OK"; then
            CRITICAL_PAGES=(
              "$DOMAIN"
              "$DOMAIN/index.html"
            )

            for page in "${CRITICAL_PAGES[@]}"; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$page" || echo "ERROR")
              TIME=$(curl -s -o /dev/null -w "%{time_total}" --max-time 10 "$page" 2>/dev/null || echo "ERROR")

              if [ "$STATUS" = "200" ]; then
                echo "$page ‚úÖ Estado: $STATUS (${TIME}s)" >> $LOG_FILE
              elif [ "$STATUS" = "ERROR" ]; then
                echo "$page ‚ùå Error de conexi√≥n" >> $LOG_FILE
              else
                echo "$page ‚ö†Ô∏è Estado: $STATUS" >> $LOG_FILE
              fi
            done
          fi

          echo "" >> $LOG_FILE

          CSS_FILES=$(find . -name "*.css" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')
          JS_FILES=$(find . -name "*.js" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*' -not -path './node_modules/*')
          IMG_FILES=$(find . \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" -o -name "*.webp" \) -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')

          echo "=== RESUMEN ===" >> $LOG_FILE
          echo "üìä Estad√≠sticas del sitio:" >> $LOG_FILE
          echo "  - Archivos HTML: $(echo "$HTML_FILES" | wc -l)" >> $LOG_FILE
          echo "  - Archivos CSS: $(echo "$CSS_FILES" | wc -l)" >> $LOG_FILE
          echo "  - Archivos JS: $(echo "$JS_FILES" | wc -l)" >> $LOG_FILE
          echo "  - Archivos de imagen: $(echo "$IMG_FILES" | wc -l)" >> $LOG_FILE
          echo "" >> $LOG_FILE
          echo "‚úÖ Verificaci√≥n completada: $DATE" >> $LOG_FILE

      - name: Commit y push de logs
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git fetch origin
          git rebase origin/main || git rebase origin/master || echo "No rebase needed"

          git add logs/rutas.log logs/broken-links.log

          if git diff --staged --quiet; then
            echo "No hay cambios en los logs"
          else
            git commit -m "üîç Verificaci√≥n combinada - $(date '+%Y-%m-%d %H:%M')"
            git push || {
              echo "Push failed, trying with rebase..."
              git pull --rebase origin main || git pull --rebase origin master
              git push
            }
          fi

      - name: Notificar logs a Discord
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          filename: logs/rutas.log
          description: |
            ‚úÖ Verificaci√≥n de rutas completada.
            üìÅ Archivo: rutas.log

      - name: Notificar reporte de enlaces a Discord
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          filename: logs/broken-links.log
          description: |
            üîó Reporte de enlaces rotos generado.
            üìÅ Archivo: broken-links.log
