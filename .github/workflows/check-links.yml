name: Verificaci√≥n de Enlaces Rotos

on:
  schedule:
    # Ejecuta cada d√≠a a las 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  check-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repositorio
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Instalar herramientas de verificaci√≥n
      run: |
        npm install -g broken-link-checker
        sudo apt-get update
        sudo apt-get install -y lynx
        
    - name: Verificar enlaces y crear reporte
      run: |
        mkdir -p logs
        
        DOMAIN="https://chakielroms.com"
        LOG_FILE="logs/broken-links.log"
        DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        echo "=== VERIFICACI√ìN DE ENLACES ROTOS - $DATE ===" > $LOG_FILE
        echo "" >> $LOG_FILE
        echo "üåê Dominio verificado: $DOMAIN" >> $LOG_FILE
        echo "üìÖ Fecha de verificaci√≥n: $DATE" >> $LOG_FILE
        echo "" >> $LOG_FILE
        
        # Funci√≥n para verificar enlaces en archivos HTML locales
        echo "=== AN√ÅLISIS DE ARCHIVOS HTML LOCALES ===" >> $LOG_FILE
        
        HTML_FILES=$(find . -name "*.html" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')
        
        if [ -z "$HTML_FILES" ]; then
          echo "‚ùå No se encontraron archivos HTML" >> $LOG_FILE
        else
          echo "üìÑ Archivos HTML encontrados:" >> $LOG_FILE
          echo "$HTML_FILES" >> $LOG_FILE
          echo "" >> $LOG_FILE
          
          # Extraer enlaces de cada archivo HTML
          for file in $HTML_FILES; do
            echo "üîç Analizando: $file" >> $LOG_FILE
            
            # Extraer enlaces href
            HREF_LINKS=$(grep -oP 'href="\K[^"]+' "$file" 2>/dev/null || echo "")
            # Extraer enlaces src
            SRC_LINKS=$(grep -oP 'src="\K[^"]+' "$file" 2>/dev/null || echo "")
            
            if [ -n "$HREF_LINKS" ]; then
              echo "  üìé Enlaces href encontrados:" >> $LOG_FILE
              echo "$HREF_LINKS" | sed 's/^/    - /' >> $LOG_FILE
            fi
            
            if [ -n "$SRC_LINKS" ]; then
              echo "  üñºÔ∏è Enlaces src encontrados:" >> $LOG_FILE  
              echo "$SRC_LINKS" | sed 's/^/    - /' >> $LOG_FILE
            fi
            
            echo "" >> $LOG_FILE
          done
        fi
        
        # Verificar el sitio web en vivo si est√° disponible
        echo "=== VERIFICACI√ìN DEL SITIO WEB EN VIVO ===" >> $LOG_FILE
        
        # Primero verificar si el sitio est√° accesible
        if curl -s --head --max-time 10 "$DOMAIN" | head -n 1 | grep -q "200 OK"; then
          echo "‚úÖ Sitio web accesible, iniciando verificaci√≥n de enlaces..." >> $LOG_FILE
          echo "" >> $LOG_FILE
          
          # Usar broken-link-checker
          echo "üîß Ejecutando broken-link-checker..." >> $LOG_FILE
          
          # Crear archivo temporal para capturar salida
          TEMP_FILE="/tmp/blc_output.txt"
          
          # Ejecutar broken-link-checker con timeout
          timeout 300 blc "$DOMAIN" \
            --recursive \
            --ordered \
            --exclude-external \
            --filter-level 2 \
            > "$TEMP_FILE" 2>&1 || echo "‚ö†Ô∏è Timeout o error en broken-link-checker" >> $LOG_FILE
          
          if [ -f "$TEMP_FILE" ]; then
            echo "üìä Resultados de broken-link-checker:" >> $LOG_FILE
            cat "$TEMP_FILE" >> $LOG_FILE
            echo "" >> $LOG_FILE
          fi
          
          # Verificaci√≥n manual de enlaces cr√≠ticos
          echo "üéØ Verificaci√≥n manual de p√°ginas principales:" >> $LOG_FILE
          
          CRITICAL_PAGES=(
            "$DOMAIN"
            "$DOMAIN/index.html"
          )
          
          for page in "${CRITICAL_PAGES[@]}"; do
            echo "  üîç Verificando: $page" >> $LOG_FILE
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$page" || echo "ERROR")
            TIME=$(curl -s -o /dev/null -w "%{time_total}" --max-time 10 "$page" 2>/dev/null || echo "ERROR")
            
            if [ "$STATUS" = "200" ]; then
              echo "    ‚úÖ Estado: $STATUS (${TIME}s)" >> $LOG_FILE
            elif [ "$STATUS" = "ERROR" ]; then
              echo "    ‚ùå Error de conexi√≥n" >> $LOG_FILE
            else
              echo "    ‚ö†Ô∏è Estado: $STATUS" >> $LOG_FILE
            fi
          done
          
        else
          echo "‚ùå El sitio web no est√° accesible desde: $DOMAIN" >> $LOG_FILE
          echo "   Verificando alternativas..." >> $LOG_FILE
          
          # Intentar con GitHub Pages directamente
          GH_DOMAIN="https://chakielzero.github.io"
          if curl -s --head --max-time 10 "$GH_DOMAIN" | head -n 1 | grep -q "200"; then
            echo "‚úÖ GitHub Pages accesible: $GH_DOMAIN" >> $LOG_FILE
          else
            echo "‚ùå GitHub Pages tambi√©n inaccesible: $GH_DOMAIN" >> $LOG_FILE
          fi
        fi
        
        echo "" >> $LOG_FILE
        
        # Verificar recursos est√°ticos locales
        echo "=== VERIFICACI√ìN DE RECURSOS EST√ÅTICOS ===" >> $LOG_FILE
        
        # Verificar archivos CSS
        CSS_FILES=$(find . -name "*.css" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')
        if [ -n "$CSS_FILES" ]; then
          echo "üìÑ Archivos CSS encontrados:" >> $LOG_FILE
          echo "$CSS_FILES" | sed 's/^/  - /' >> $LOG_FILE
        else
          echo "‚ùå No se encontraron archivos CSS" >> $LOG_FILE
        fi
        echo "" >> $LOG_FILE
        
        # Verificar archivos JS
        JS_FILES=$(find . -name "*.js" -not -path './.git/*' -not -path './logs/*' -not -path './backups/*' -not -path './node_modules/*')
        if [ -n "$JS_FILES" ]; then
          echo "üìÑ Archivos JavaScript encontrados:" >> $LOG_FILE
          echo "$JS_FILES" | sed 's/^/  - /' >> $LOG_FILE
        else
          echo "‚ùå No se encontraron archivos JavaScript" >> $LOG_FILE
        fi
        echo "" >> $LOG_FILE
        
        # Verificar im√°genes
        IMG_FILES=$(find . \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" -o -name "*.webp" \) -not -path './.git/*' -not -path './logs/*' -not -path './backups/*')
        if [ -n "$IMG_FILES" ]; then
          echo "üñºÔ∏è Archivos de imagen encontrados:" >> $LOG_FILE
          echo "$IMG_FILES" | sed 's/^/  - /' >> $LOG_FILE
        else
          echo "‚ùå No se encontraron archivos de imagen" >> $LOG_FILE
        fi
        echo "" >> $LOG_FILE
        
        # Resumen final
        echo "=== RESUMEN ===" >> $LOG_FILE
        HTML_COUNT=$(echo "$HTML_FILES" | wc -l)
        CSS_COUNT=$(echo "$CSS_FILES" | wc -l) 
        JS_COUNT=$(echo "$JS_FILES" | wc -l)
        IMG_COUNT=$(echo "$IMG_FILES" | wc -l)
        
        echo "üìä Estad√≠sticas del sitio:" >> $LOG_FILE
        echo "  - Archivos HTML: $HTML_COUNT" >> $LOG_FILE
        echo "  - Archivos CSS: $CSS_COUNT" >> $LOG_FILE
        echo "  - Archivos JS: $JS_COUNT" >> $LOG_FILE
        echo "  - Archivos de imagen: $IMG_COUNT" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "‚úÖ Verificaci√≥n completada: $DATE" >> $LOG_FILE
        
    - name: Commit y push del reporte
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Asegurar que estamos actualizados
        git fetch origin
        git rebase origin/main || git rebase origin/master || echo "No rebase needed"
        
        git add logs/broken-links.log
        
        if git diff --staged --quiet; then
          echo "No hay cambios en el reporte de enlaces"
        else
          git commit -m "üîó Reporte de enlaces rotos - $(date '+%Y-%m-%d %H:%M')"
          
          # Retry push con rebase si falla
          git push || {
            echo "Push failed, trying with rebase..."
            git pull --rebase origin main || git pull --rebase origin master
            git push
          }
        fi
        
    - name: Crear issue si hay enlaces rotos
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üîó Enlaces rotos detectados - ' + new Date().toISOString().split('T')[0],
            body: '‚ö†Ô∏è Se han detectado enlaces rotos en el sitio web.\n\nRevisa el archivo `logs/broken-links.log` para m√°s detalles.\n\nEste issue se cre√≥ autom√°ticamente por GitHub Actions.',
            labels: ['bug', 'links']
          })
