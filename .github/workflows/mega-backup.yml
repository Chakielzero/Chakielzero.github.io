# Backup completo a MEGA
name: Backup a MEGA

on:
  schedule:
    # Ejecuta cada d√≠a a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  backup-to-mega:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repositorio actual
      uses: actions/checkout@v4
      with:
        fetch-depth: 1 # Solo el √∫ltimo commit
        
    - name: Configurar fecha y variables
      id: date
      run: |
        echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "short_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
        echo "month=$(date +'%m-%B')" >> $GITHUB_OUTPUT
        echo "repo_name=chakielroms.com" >> $GITHUB_OUTPUT
        
    - name: Crear backup del c√≥digo fuente
      id: create_backup
      run: |
        mkdir -p backup-data
        
        # Crear archivo comprimido SOLO del c√≥digo fuente importante
        echo "üì¶ Creando backup de chakielroms.com..."
        tar -czf backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz \
          --exclude='.git' \
          --exclude='backup-data' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          3ds/ android/ assets/ dmca/ gamecube/ \
          logs/ pc/ ps2/ ps3/ ps4/ psvita/ \
          sudachi/ wii/ wiiu/ \
          CNAME index.html robots.txt sitemap.xml styles.css
          
        # Obtener informaci√≥n del backup
        BACKUP_SIZE_HUMAN=$(du -h backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz | cut -f1)
        BACKUP_SIZE_BYTES=$(stat -f%z backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz 2>/dev/null || stat -c%s backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz)
        BACKUP_SIZE_MB=$((BACKUP_SIZE_BYTES / 1024 / 1024))
        
        echo "backup_size_human=$BACKUP_SIZE_HUMAN" >> $GITHUB_OUTPUT
        echo "backup_size_mb=$BACKUP_SIZE_MB" >> $GITHUB_OUTPUT
        echo "backup_filename=chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz" >> $GITHUB_OUTPUT
        
        # Contar archivos incluidos
        TOTAL_FILES=$(tar -tzf backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz | wc -l)
        echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Backup creado: $BACKUP_SIZE_HUMAN ($TOTAL_FILES archivos)"
        
    - name: Configurar MEGA CLI
      uses: Difegue/action-megacmd@master
      with:
        username: ${{ secrets.MEGA_USERNAME }}
        password: ${{ secrets.MEGA_PASSWORD }}
        
    - name: Crear estructura de carpetas en MEGA
      id: setup_mega
      run: |
        # Crear estructura jer√°rquica en MEGA
        REPO_NAME="${{ steps.date.outputs.repo_name }}"
        YEAR="${{ steps.date.outputs.year }}"
        MONTH="${{ steps.date.outputs.month }}"
        
        echo "üìÅ Configurando estructura en MEGA..."
        
        # Verificar y crear carpetas si no existen
        mega-mkdir -p "/GitHub-Backups" || echo "Carpeta principal ya existe"
        mega-mkdir -p "/GitHub-Backups/$REPO_NAME" || echo "Carpeta del sitio ya existe"
        mega-mkdir -p "/GitHub-Backups/$REPO_NAME/$YEAR" || echo "Carpeta del a√±o ya existe"
        mega-mkdir -p "/GitHub-Backups/$REPO_NAME/$YEAR/$MONTH" || echo "Carpeta del mes ya existe"
        
        MEGA_PATH="/GitHub-Backups/$REPO_NAME/$YEAR/$MONTH"
        echo "mega_path=$MEGA_PATH" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Estructura creada: $MEGA_PATH"
        
    - name: Subir backup a MEGA
      id: upload_mega
      run: |
        MEGA_PATH="${{ steps.setup_mega.outputs.mega_path }}"
        BACKUP_FILE="backup-data/${{ steps.create_backup.outputs.backup_filename }}"
        
        echo "üì§ Subiendo ${{ steps.create_backup.outputs.backup_size_human }} a MEGA..."
        echo "üìç Destino: $MEGA_PATH"
        
        # Subir archivo principal
        if mega-put "$BACKUP_FILE" "$MEGA_PATH/"; then
          echo "‚úÖ Archivo subido exitosamente a MEGA"
          echo "upload_success=true" >> $GITHUB_OUTPUT
          
          # Intentar generar enlace p√∫blico (opcional)
          echo "üîó Generando enlace p√∫blico..."
          PUBLIC_LINK=$(mega-export "$MEGA_PATH/${{ steps.create_backup.outputs.backup_filename }}" 2>/dev/null | grep -o 'https://mega.nz/file/[^[:space:]]*' || echo "")
          
          if [ -n "$PUBLIC_LINK" ]; then
            echo "public_link=$PUBLIC_LINK" >> $GITHUB_OUTPUT
            echo "‚úÖ Enlace p√∫blico generado"
          else
            echo "public_link=" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Sin enlace p√∫blico (normal)"
          fi
          
        else
          echo "‚ùå Error subiendo archivo a MEGA"
          echo "upload_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Verificar subida y obtener informaci√≥n de MEGA
      id: verify_mega
      run: |
        MEGA_PATH="${{ steps.setup_mega.outputs.mega_path }}"
        
        echo "üìã Verificando archivos en MEGA..."
        
        # Listar archivos en la carpeta para verificar
        if mega-ls "$MEGA_PATH" | grep -q "${{ steps.create_backup.outputs.backup_filename }}"; then
          echo "‚úÖ Archivo confirmado en MEGA"
          
          # Contar total de backups en la carpeta
          TOTAL_BACKUPS=$(mega-ls "$MEGA_PATH" | grep -c "chakielroms-backup-" || echo "1")
          echo "total_backups=$TOTAL_BACKUPS" >> $GITHUB_OUTPUT
          
          # Obtener informaci√≥n de cuota (si est√° disponible)
          QUOTA_INFO=$(mega-du 2>/dev/null | grep -E "(Used|Available)" | head -1 || echo "Informaci√≥n no disponible")
          echo "quota_info=$QUOTA_INFO" >> $GITHUB_OUTPUT
          
        else
          echo "‚ùå Archivo NO encontrado en MEGA"
          exit 1
        fi
        
    - name: Limpiar backups antiguos en MEGA
      run: |
        MEGA_PATH="${{ steps.setup_mega.outputs.mega_path }}"
        
        echo "üßπ Limpiando backups antiguos..."
        
        # Obtener lista de archivos de backup ordenados por fecha (m√°s antiguos primero)
        BACKUP_FILES=$(mega-ls "$MEGA_PATH" | grep "chakielroms-backup-" | sort)
        
        if [ -n "$BACKUP_FILES" ]; then
          BACKUP_COUNT=$(echo "$BACKUP_FILES" | wc -l)
          
          # Mantener solo los √∫ltimos 10 backups
          if [ $BACKUP_COUNT -gt 10 ]; then
            FILES_TO_DELETE=$(echo "$BACKUP_FILES" | head -n $((BACKUP_COUNT - 10)))
            
            echo "$FILES_TO_DELETE" | while read -r backup_file; do
              if [ -n "$backup_file" ]; then
                echo "üóëÔ∏è Eliminando backup antiguo: $backup_file"
                mega-rm "$MEGA_PATH/$backup_file" || echo "‚ö†Ô∏è No se pudo eliminar $backup_file"
              fi
            done
            
            echo "‚úÖ Limpieza completada (mantenidos √∫ltimos 10 backups)"
          else
            echo "‚ÑπÔ∏è No hay backups antiguos que eliminar ($BACKUP_COUNT backups)"
          fi
        fi
        
    # Notificaci√≥n de √©xito
    - name: Notificaci√≥n de √©xito a Discord
      if: success()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        content: |
          ‚úÖ **¬°Backup a MEGA completado exitosamente!**
          
          **üìä Detalles del backup:**
          - **Sitio web**: `chakielroms.com`
          - **Fecha**: `${{ steps.date.outputs.short_date }}`
          - **Tama√±o**: `${{ steps.create_backup.outputs.backup_size_human }}` (${{ steps.create_backup.outputs.backup_size_mb }} MB)
          - **Archivos**: `${{ steps.create_backup.outputs.total_files }}` archivos incluidos
          - **Backups en MEGA**: `${{ steps.verify_mega.outputs.total_backups }}` backups almacenados
          
          **üìÅ Ubicaci√≥n en MEGA:**
          > `GitHub-Backups/chakielroms.com/${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}/`
          
          **üìÇ Archivo:**
          > `${{ steps.create_backup.outputs.backup_filename }}`
          
          ${{ steps.upload_mega.outputs.public_link && format('**üîó Enlace directo:**
          > {0}', steps.upload_mega.outputs.public_link) || '' }}
          
          **üíæ Cuota MEGA:**
          > ${{ steps.verify_mega.outputs.quota_info }}
          
          **üéÆ Contenido incluido:**
          üïπÔ∏è Consolas: 3DS, Android, GameCube, PC, PS2, PS3, PS4, PS Vita, Wii, Wii U, Sudachi
          üåê Web: index.html, styles.css, assets, CNAME, robots.txt, sitemap.xml
          üìÇ Extras: logs, dmca, subir
          
          ---
          *ü§ñ Accede a tu cuenta MEGA para descargar el backup*
        
    # Notificaci√≥n de fallo
    - name: Notificaci√≥n de fallo a Discord
      if: failure()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        content: |
          ‚ùå **¬°Error en backup a MEGA!**
          
          El backup de **chakielroms.com** ha fallado.
          
          **üîç Posibles causas:**
          - Credenciales de MEGA incorrectas o expiradas
          - Cuota de almacenamiento de MEGA excedida (50GB)
          - Problemas de conexi√≥n con servidores de MEGA
          - Error en la creaci√≥n del archivo comprimido
          
          **üìã Ver logs detallados:**
          > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **‚öôÔ∏è Verificar configuraci√≥n:**
          - Secret `MEGA_USERNAME` configurado correctamente
          - Secret `MEGA_PASSWORD` configurado correctamente
          - Secret `DISCORD_WEBHOOK_URL` activo
          
          ---
          *ü§ñ Revisar cuenta MEGA y intentar de nuevo*
