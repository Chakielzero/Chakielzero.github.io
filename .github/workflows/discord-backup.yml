# Backup directo a Discord
name: Backup a Discord

on:
  schedule:
    # Ejecuta cada día a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  backup-to-discord:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repositorio actual (solo el commit actual)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1 # Obtiene solo el último commit para reducir el tamaño
        
    - name: Configurar fecha y variables
      id: date
      run: |
        echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "short_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "repo_name=$(echo '${{ github.repository }}' | cut -d'/' -f2)" >> $GITHUB_OUTPUT
        
    - name: Crear backup del código fuente
      id: create_backup
      run: |
        mkdir -p backup-data
        
        # Crear archivo comprimido SOLO del código fuente (sin git, sin extras)
        echo "📦 Creando backup del código fuente..."
        tar -czf backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz \
          --exclude='.git' \
          --exclude='backup-data' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          3ds/ android/ assets/ dmca/ gamecube/ \
          logs/ pc/ ps2/ ps3/ ps4/ psvita/ \
          sudachi/ wii/ wiiu/ \
          CNAME index.html robots.txt sitemap.xml styles.css
          
        # Verificar tamaño del archivo
        BACKUP_SIZE_BYTES=$(stat -f%z backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz 2>/dev/null || stat -c%s backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz)
        BACKUP_SIZE_MB=$((BACKUP_SIZE_BYTES / 1024 / 1024))
        BACKUP_SIZE_HUMAN=$(du -h backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz | cut -f1)
        
        echo "backup_size_mb=$BACKUP_SIZE_MB" >> $GITHUB_OUTPUT
        echo "backup_size_human=$BACKUP_SIZE_HUMAN" >> $GITHUB_OUTPUT
        echo "backup_filename=chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz" >> $GITHUB_OUTPUT
        
        # Verificar si el archivo es menor a 20MB (más conservador)
        if [ $BACKUP_SIZE_MB -gt 20 ]; then
          echo "⚠️ Archivo de $BACKUP_SIZE_MB MB será dividido para Discord (límite conservador: 20MB)"
          echo "backup_too_large=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Archivo de $BACKUP_SIZE_MB MB está dentro del límite conservador"
          echo "backup_too_large=false" >> $GITHUB_OUTPUT
        fi
        
        # Mostrar contenido del backup
        echo "📋 Contenido del backup:"
        tar -tzf backup-data/chakielroms-backup-${{ steps.date.outputs.date }}.tar.gz | head -20
        
    # Enviar notificación previa con información
    - name: Notificación previa a Discord
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        content: |
          🔄 **Iniciando backup de chakielroms.com...**
          
          **📊 Información:**
          - **Sitio web**: `chakielroms.com`
          - **Fecha**: `${{ steps.date.outputs.short_date }}`
          - **Tamaño del backup**: `${{ steps.create_backup.outputs.backup_size_human }}`
          
          ${{ steps.create_backup.outputs.backup_too_large == 'true' && '📦 **Archivo será dividido**: Para evitar errores de Discord' || '✅ **OK**: Archivo dentro del límite de Discord' }}
          
          📤 Subiendo código fuente...
        
    # Subir backup principal a Discord (método directo más confiable)
    - name: Enviar backup del código fuente a Discord
      if: steps.create_backup.outputs.backup_too_large == 'false'
      run: |
        echo "📤 Enviando archivo a Discord..."
        
        RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Content-Type: multipart/form-data" \
          -F "file=@backup-data/${{ steps.create_backup.outputs.backup_filename }}" \
          -F "content=📦 **Backup de chakielroms.com** - ${{ steps.date.outputs.short_date }} (${{ steps.create_backup.outputs.backup_size_human }})" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}")
        
        HTTP_CODE="${RESPONSE: -3}"
        RESPONSE_BODY="${RESPONSE%???}"
        
        echo "Código de respuesta: $HTTP_CODE"
        echo "Respuesta: $RESPONSE_BODY"
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
          echo "✅ Archivo enviado exitosamente a Discord"
          echo "upload_success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Error enviando archivo a Discord"
          echo "upload_success=false" >> $GITHUB_OUTPUT
          echo "error_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "error_response=$RESPONSE_BODY" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    # Crear backup dividido si es muy grande
    - name: Crear backup dividido si es necesario
      if: steps.create_backup.outputs.backup_too_large == 'true'
      id: split_backup
      run: |
        echo "📦 Creando backup dividido para Discord..."
        
        # Dividir en partes más pequeñas (15MB cada una para ser más seguro)
        split -b 15M backup-data/${{ steps.create_backup.outputs.backup_filename }} backup-data/chakielroms-part-
        
        # Renombrar partes con extensión
        cd backup-data
        for part in chakielroms-part-*; do
          mv "$part" "$part.tar.gz"
        done
        
        # Contar partes
        PARTS_COUNT=$(ls chakielroms-part-*.tar.gz | wc -l)
        echo "parts_count=$PARTS_COUNT" >> $GITHUB_OUTPUT
        
        echo "✅ Backup dividido en $PARTS_COUNT partes de ~20MB cada una"
        
    # Subir partes divididas si es necesario (método directo)
    - name: Enviar partes divididas a Discord
      if: steps.create_backup.outputs.backup_too_large == 'true'
      run: |
        echo "📤 Enviando backup dividido en ${{ steps.split_backup.outputs.parts_count }} partes..."
        
        # Enviar mensaje informativo primero
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{\"content\":\"📦 **Backup dividido de chakielroms.com** - ${{ steps.date.outputs.short_date }}\\n\\n⚠️ Archivo dividido en ${{ steps.split_backup.outputs.parts_count }} partes (archivo original: ${{ steps.create_backup.outputs.backup_size_human }})\\n\\n📥 Descarga todas las partes y únelas con:\\n\`\`\`\\ncat chakielroms-part-*.tar.gz > backup-completo.tar.gz\\n\`\`\`\"}" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}"
        
        sleep 2
        
        # Enviar cada parte con curl directo
        PART_NUM=1
        for part in backup-data/chakielroms-part-*.tar.gz; do
          if [ -f "$part" ]; then
            echo "Enviando parte $PART_NUM de ${{ steps.split_backup.outputs.parts_count }}..."
            
            RESPONSE=$(curl -s -w "%{http_code}" -X POST \
              -H "Content-Type: multipart/form-data" \
              -F "file=@$part" \
              -F "content=📦 Parte $PART_NUM/${{ steps.split_backup.outputs.parts_count }}" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}")
            
            HTTP_CODE="${RESPONSE: -3}"
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
              echo "✅ Parte $PART_NUM enviada exitosamente"
            else
              echo "❌ Error enviando parte $PART_NUM (código: $HTTP_CODE)"
            fi
            
            PART_NUM=$((PART_NUM + 1))
            # Esperar entre uploads para no saturar Discord
            sleep 3
          fi
        done
        
    # Notificación final de éxito
    - name: Notificación final de éxito
      if: success()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        content: |
          ✅ **¡Backup de chakielroms.com completado!**
          
          **📊 Resumen:**
          - **Sitio web**: `chakielroms.com`
          - **Fecha**: `${{ steps.date.outputs.short_date }}`
          - **Tamaño**: `${{ steps.create_backup.outputs.backup_size_human }}`
          
          ${{ steps.create_backup.outputs.backup_too_large == 'true' && format('**📦 Backup dividido**: {0} partes enviadas', steps.split_backup.outputs.parts_count) || '**📦 Backup único**: Archivo completo enviado' }}
          
          **📁 Contenido incluido:**
          🎮 Consolas: 3DS, Android, GameCube, PC, PS2, PS3, PS4, PS Vita, Wii, Wii U, Sudachi
          🌐 Web: index.html, styles.css, assets, CNAME, robots.txt, sitemap.xml
          📂 Extras: logs, dmca, subir
          
          **🔒 Seguridad**: Código fuente almacenado de forma segura en Discord
          
          ---
          *🤖 Backup automático de chakielroms.com*
          
    # Notificación de fallo
    - name: Notificación de fallo en Discord
      if: failure()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        content: |
          ❌ **¡Error en backup de chakielroms.com!**
          
          El backup del sitio web ha fallado.
          
          **🔍 Posibles causas:**
          - Archivo demasiado grande (>25MB)
          - Problema con el webhook de Discord
          - Error en la creación del archivo comprimido
          
          **📋 Ver logs detallados:**
          > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ---
          *🤖 Notificación automática de error*
